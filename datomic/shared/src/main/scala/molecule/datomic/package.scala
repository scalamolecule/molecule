package molecule

import molecule.boilerplate.markers.namespaceMarkers.Molecule_02
import molecule.datomic.api.DatomicMoleculeApi.DatomicMoleculeApi_2
import scala.language.implicitConversions

package object datomic extends MoleculeImplicits {
    implicit override def molecule2api[A, B](molecule: Molecule_02[A, B]): DatomicMoleculeApi_2[A, B] = new DatomicMoleculeApi_2(molecule)
  //    implicit final def m[A                                                               ](dsl: Molecule_01[A                                                               ]): Molecule_01[A                                                               ] = macro MakeMolecule.from01attr[props, A                                                               ]
  //    implicit final def m[A, B                                                            ](dsl: Molecule_02[A, B                                                            ]): Molecule_02[A, B                                                            ] = macro MakeMolecule.from02attr[props, A, B                                                            ]
  //    implicit final def m[A, B, C                                                         ](dsl: Molecule_03[A, B, C                                                         ]): Molecule_03[A, B, C                                                         ] = macro MakeMolecule.from03attr[props, A, B, C                                                         ]
  //    implicit final def m[A, B, C, D                                                      ](dsl: Molecule_04[A, B, C, D                                                      ]): Molecule_04[A, B, C, D                                                      ] = macro MakeMolecule.from04attr[props, A, B, C, D                                                      ]
  //    implicit final def m[A, B, C, D, E                                                   ](dsl: Molecule_05[A, B, C, D, E                                                   ]): Molecule_05[A, B, C, D, E                                                   ] = macro MakeMolecule.from05attr[props, A, B, C, D, E                                                   ]
  //    implicit final def m[A, B, C, D, E, F                                                ](dsl: Molecule_06[A, B, C, D, E, F                                                ]): Molecule_06[A, B, C, D, E, F                                                ] = macro MakeMolecule.from06attr[props, A, B, C, D, E, F                                                ]
  //    implicit final def m[A, B, C, D, E, F, G                                             ](dsl: Molecule_07[A, B, C, D, E, F, G                                             ]): Molecule_07[A, B, C, D, E, F, G                                             ] = macro MakeMolecule.from07attr[props, A, B, C, D, E, F, G                                             ]
  //    implicit final def m[A, B, C, D, E, F, G, H                                          ](dsl: Molecule_08[A, B, C, D, E, F, G, H                                          ]): Molecule_08[A, B, C, D, E, F, G, H                                          ] = macro MakeMolecule.from08attr[props, A, B, C, D, E, F, G, H                                          ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I                                       ](dsl: Molecule_09[A, B, C, D, E, F, G, H, I                                       ]): Molecule_09[A, B, C, D, E, F, G, H, I                                       ] = macro MakeMolecule.from09attr[props, A, B, C, D, E, F, G, H, I                                       ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J                                    ](dsl: Molecule_10[A, B, C, D, E, F, G, H, I, J                                    ]): Molecule_10[A, B, C, D, E, F, G, H, I, J                                    ] = macro MakeMolecule.from10attr[props, A, B, C, D, E, F, G, H, I, J                                    ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K                                 ](dsl: Molecule_11[A, B, C, D, E, F, G, H, I, J, K                                 ]): Molecule_11[A, B, C, D, E, F, G, H, I, J, K                                 ] = macro MakeMolecule.from11attr[props, A, B, C, D, E, F, G, H, I, J, K                                 ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L                              ](dsl: Molecule_12[A, B, C, D, E, F, G, H, I, J, K, L                              ]): Molecule_12[A, B, C, D, E, F, G, H, I, J, K, L                              ] = macro MakeMolecule.from12attr[props, A, B, C, D, E, F, G, H, I, J, K, L                              ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M                           ](dsl: Molecule_13[A, B, C, D, E, F, G, H, I, J, K, L, M                           ]): Molecule_13[A, B, C, D, E, F, G, H, I, J, K, L, M                           ] = macro MakeMolecule.from13attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M                           ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M, N                        ](dsl: Molecule_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N                        ]): Molecule_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N                        ] = macro MakeMolecule.from14attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M, N                        ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O                     ](dsl: Molecule_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O                     ]): Molecule_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O                     ] = macro MakeMolecule.from15attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O                     ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P                  ](dsl: Molecule_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P                  ]): Molecule_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P                  ] = macro MakeMolecule.from16attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P                  ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q               ](dsl: Molecule_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q               ]): Molecule_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q               ] = macro MakeMolecule.from17attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q               ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R            ](dsl: Molecule_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R            ]): Molecule_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R            ] = macro MakeMolecule.from18attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R            ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S         ](dsl: Molecule_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S         ]): Molecule_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S         ] = macro MakeMolecule.from19attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S         ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T      ](dsl: Molecule_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T      ]): Molecule_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T      ] = macro MakeMolecule.from20attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T      ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U   ](dsl: Molecule_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U   ]): Molecule_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U   ] = macro MakeMolecule.from21attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U   ]
  //    implicit final def m[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](dsl: Molecule_22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]): Molecule_22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V] = macro MakeMolecule.from22attr[props, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]
}
