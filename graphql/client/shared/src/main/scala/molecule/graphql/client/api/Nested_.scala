// GENERATED CODE ********************************
package molecule.graphql.client.api

import molecule.core.ast.DataModel


class NestedInit_00[NestedTpl](override val dataModel: DataModel) extends Molecule_01[Seq[NestedTpl]]

trait NestedOp_0 {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_00[NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_00[NestedTpl] = ???
}
trait Nested_0 { self: NestedOp_0 =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_00[a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_00[(a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_00[(a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_00[(a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_00[(a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_00[(a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_00[(a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_00[(a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_00[(a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_00[a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_00[(a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_00[(a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_00[(a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_00[(a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_00[(a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_00[(a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_00[(a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_00[(a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_00[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_01[A, NestedTpl](override val dataModel: DataModel) extends Molecule_02[A, Seq[NestedTpl]]

trait NestedOp_1[A] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_01[A, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_01[A, NestedTpl] = ???
}
trait Nested_1[A] { self: NestedOp_1[A] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_01[A, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_01[A, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_01[A, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_01[A, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_01[A, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_01[A, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_01[A, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_01[A, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_01[A, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_01[A, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_01[A, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_01[A, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_01[A, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_01[A, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_01[A, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_01[A, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_01[A, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_02[A, B, NestedTpl](override val dataModel: DataModel) extends Molecule_03[A, B, Seq[NestedTpl]]

trait NestedOp_2[A, B] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_02[A, B, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_02[A, B, NestedTpl] = ???
}
trait Nested_2[A, B] { self: NestedOp_2[A, B] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_02[A, B, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_02[A, B, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_02[A, B, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_02[A, B, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_02[A, B, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_02[A, B, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_02[A, B, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_02[A, B, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_02[A, B, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_02[A, B, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_02[A, B, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_02[A, B, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_02[A, B, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_02[A, B, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_02[A, B, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_03[A, B, C, NestedTpl](override val dataModel: DataModel) extends Molecule_04[A, B, C, Seq[NestedTpl]]

trait NestedOp_3[A, B, C] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_03[A, B, C, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_03[A, B, C, NestedTpl] = ???
}
trait Nested_3[A, B, C] { self: NestedOp_3[A, B, C] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_03[A, B, C, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_03[A, B, C, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_03[A, B, C, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_03[A, B, C, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_03[A, B, C, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_03[A, B, C, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_03[A, B, C, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_03[A, B, C, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_03[A, B, C, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_03[A, B, C, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_03[A, B, C, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_03[A, B, C, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_03[A, B, C, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_04[A, B, C, D, NestedTpl](override val dataModel: DataModel) extends Molecule_05[A, B, C, D, Seq[NestedTpl]]

trait NestedOp_4[A, B, C, D] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_04[A, B, C, D, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_04[A, B, C, D, NestedTpl] = ???
}
trait Nested_4[A, B, C, D] { self: NestedOp_4[A, B, C, D] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_04[A, B, C, D, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_04[A, B, C, D, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_04[A, B, C, D, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_04[A, B, C, D, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_04[A, B, C, D, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_04[A, B, C, D, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_04[A, B, C, D, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_04[A, B, C, D, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_04[A, B, C, D, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_04[A, B, C, D, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_04[A, B, C, D, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_05[A, B, C, D, E, NestedTpl](override val dataModel: DataModel) extends Molecule_06[A, B, C, D, E, Seq[NestedTpl]]

trait NestedOp_5[A, B, C, D, E] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_05[A, B, C, D, E, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_05[A, B, C, D, E, NestedTpl] = ???
}
trait Nested_5[A, B, C, D, E] { self: NestedOp_5[A, B, C, D, E] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_05[A, B, C, D, E, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_05[A, B, C, D, E, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_05[A, B, C, D, E, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_05[A, B, C, D, E, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_05[A, B, C, D, E, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_05[A, B, C, D, E, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_05[A, B, C, D, E, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_05[A, B, C, D, E, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_05[A, B, C, D, E, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_06[A, B, C, D, E, F, NestedTpl](override val dataModel: DataModel) extends Molecule_07[A, B, C, D, E, F, Seq[NestedTpl]]

trait NestedOp_6[A, B, C, D, E, F] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_06[A, B, C, D, E, F, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_06[A, B, C, D, E, F, NestedTpl] = ???
}
trait Nested_6[A, B, C, D, E, F] { self: NestedOp_6[A, B, C, D, E, F] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_06[A, B, C, D, E, F, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_06[A, B, C, D, E, F, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_06[A, B, C, D, E, F, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_06[A, B, C, D, E, F, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_06[A, B, C, D, E, F, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_06[A, B, C, D, E, F, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_06[A, B, C, D, E, F, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_07[A, B, C, D, E, F, G, NestedTpl](override val dataModel: DataModel) extends Molecule_08[A, B, C, D, E, F, G, Seq[NestedTpl]]

trait NestedOp_7[A, B, C, D, E, F, G] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_07[A, B, C, D, E, F, G, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_07[A, B, C, D, E, F, G, NestedTpl] = ???
}
trait Nested_7[A, B, C, D, E, F, G] { self: NestedOp_7[A, B, C, D, E, F, G] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_07[A, B, C, D, E, F, G, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_07[A, B, C, D, E, F, G, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_07[A, B, C, D, E, F, G, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_07[A, B, C, D, E, F, G, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_07[A, B, C, D, E, F, G, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_08[A, B, C, D, E, F, G, H, NestedTpl](override val dataModel: DataModel) extends Molecule_09[A, B, C, D, E, F, G, H, Seq[NestedTpl]]

trait NestedOp_8[A, B, C, D, E, F, G, H] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_08[A, B, C, D, E, F, G, H, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_08[A, B, C, D, E, F, G, H, NestedTpl] = ???
}
trait Nested_8[A, B, C, D, E, F, G, H] { self: NestedOp_8[A, B, C, D, E, F, G, H] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_08[A, B, C, D, E, F, G, H, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_08[A, B, C, D, E, F, G, H, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_08[A, B, C, D, E, F, G, H, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_09[A, B, C, D, E, F, G, H, I, NestedTpl](override val dataModel: DataModel) extends Molecule_10[A, B, C, D, E, F, G, H, I, Seq[NestedTpl]]

trait NestedOp_9[A, B, C, D, E, F, G, H, I] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_09[A, B, C, D, E, F, G, H, I, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_09[A, B, C, D, E, F, G, H, I, NestedTpl] = ???
}
trait Nested_9[A, B, C, D, E, F, G, H, I] { self: NestedOp_9[A, B, C, D, E, F, G, H, I] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_09[A, B, C, D, E, F, G, H, I, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_09[A, B, C, D, E, F, G, H, I, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_09[A, B, C, D, E, F, G, H, I, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_10[A, B, C, D, E, F, G, H, I, J, NestedTpl](override val dataModel: DataModel) extends Molecule_11[A, B, C, D, E, F, G, H, I, J, Seq[NestedTpl]]

trait NestedOp_10[A, B, C, D, E, F, G, H, I, J] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_10[A, B, C, D, E, F, G, H, I, J, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_10[A, B, C, D, E, F, G, H, I, J, NestedTpl] = ???
}
trait Nested_10[A, B, C, D, E, F, G, H, I, J] { self: NestedOp_10[A, B, C, D, E, F, G, H, I, J] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_10[A, B, C, D, E, F, G, H, I, J, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, NestedTpl](override val dataModel: DataModel) extends Molecule_12[A, B, C, D, E, F, G, H, I, J, K, Seq[NestedTpl]]

trait NestedOp_11[A, B, C, D, E, F, G, H, I, J, K] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, NestedTpl] = ???
}
trait Nested_11[A, B, C, D, E, F, G, H, I, J, K] { self: NestedOp_11[A, B, C, D, E, F, G, H, I, J, K] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_11[A, B, C, D, E, F, G, H, I, J, K, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, NestedTpl](override val dataModel: DataModel) extends Molecule_13[A, B, C, D, E, F, G, H, I, J, K, L, Seq[NestedTpl]]

trait NestedOp_12[A, B, C, D, E, F, G, H, I, J, K, L] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, NestedTpl] = ???
}
trait Nested_12[A, B, C, D, E, F, G, H, I, J, K, L] { self: NestedOp_12[A, B, C, D, E, F, G, H, I, J, K, L] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_12[A, B, C, D, E, F, G, H, I, J, K, L, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, NestedTpl](override val dataModel: DataModel) extends Molecule_14[A, B, C, D, E, F, G, H, I, J, K, L, M, Seq[NestedTpl]]

trait NestedOp_13[A, B, C, D, E, F, G, H, I, J, K, L, M] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, NestedTpl] = ???
}
trait Nested_13[A, B, C, D, E, F, G, H, I, J, K, L, M] { self: NestedOp_13[A, B, C, D, E, F, G, H, I, J, K, L, M] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_13[A, B, C, D, E, F, G, H, I, J, K, L, M, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, NestedTpl](override val dataModel: DataModel) extends Molecule_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, Seq[NestedTpl]]

trait NestedOp_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, NestedTpl] = ???
}
trait Nested_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N] { self: NestedOp_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, NestedTpl](override val dataModel: DataModel) extends Molecule_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Seq[NestedTpl]]

trait NestedOp_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, NestedTpl] = ???
}
trait Nested_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O] { self: NestedOp_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, NestedTpl](override val dataModel: DataModel) extends Molecule_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Seq[NestedTpl]]

trait NestedOp_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, NestedTpl] = ???
}
trait Nested_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P] { self: NestedOp_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, NestedTpl](override val dataModel: DataModel) extends Molecule_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Seq[NestedTpl]]

trait NestedOp_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, NestedTpl] = ???
}
trait Nested_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q] { self: NestedOp_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, NestedTpl](override val dataModel: DataModel) extends Molecule_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Seq[NestedTpl]]

trait NestedOp_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, NestedTpl] = ???
}
trait Nested_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R] { self: NestedOp_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, NestedTpl](override val dataModel: DataModel) extends Molecule_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Seq[NestedTpl]]

trait NestedOp_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, NestedTpl] = ???
}
trait Nested_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S] { self: NestedOp_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, NestedTpl](override val dataModel: DataModel) extends Molecule_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Seq[NestedTpl]]

trait NestedOp_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, NestedTpl] = ???
}
trait Nested_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T] { self: NestedOp_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}


class NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, NestedTpl](override val dataModel: DataModel) extends Molecule_22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Seq[NestedTpl]]

trait NestedOp_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U] {
  protected def _nestedMan[NestedTpl](nestedDataModel: DataModel): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, NestedTpl] = ???
  protected def _nestedOpt[NestedTpl](nestedDataModel: DataModel): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, NestedTpl] = ???
}
trait Nested_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U] { self: NestedOp_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U] =>
  final def * [a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, a                                                                 ] = _nestedMan[a                                                                 ](nested.dataModel)
  final def * [a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b                                                            )] = _nestedMan[(a, b                                                            )](nested.dataModel)
  final def * [a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c                                                         )] = _nestedMan[(a, b, c                                                         )](nested.dataModel)
  final def * [a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d                                                      )] = _nestedMan[(a, b, c, d                                                      )](nested.dataModel)
  final def * [a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e                                                   )] = _nestedMan[(a, b, c, d, e                                                   )](nested.dataModel)
  final def * [a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f                                                )] = _nestedMan[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def * [a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g                                             )] = _nestedMan[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h                                          )] = _nestedMan[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i                                       )] = _nestedMan[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def * [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedMan[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)

  final def *?[a                                                               ] (nested: Molecule_01[a                                                               ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, a                                                                 ] = _nestedOpt[a                                                                 ](nested.dataModel)
  final def *?[a, b                                                            ] (nested: Molecule_02[a, b                                                            ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b                                                            )] = _nestedOpt[(a, b                                                            )](nested.dataModel)
  final def *?[a, b, c                                                         ] (nested: Molecule_03[a, b, c                                                         ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c                                                         )] = _nestedOpt[(a, b, c                                                         )](nested.dataModel)
  final def *?[a, b, c, d                                                      ] (nested: Molecule_04[a, b, c, d                                                      ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d                                                      )] = _nestedOpt[(a, b, c, d                                                      )](nested.dataModel)
  final def *?[a, b, c, d, e                                                   ] (nested: Molecule_05[a, b, c, d, e                                                   ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e                                                   )] = _nestedOpt[(a, b, c, d, e                                                   )](nested.dataModel)
  final def *?[a, b, c, d, e, f                                                ] (nested: Molecule_06[a, b, c, d, e, f                                                ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f                                                )] = _nestedOpt[(a, b, c, d, e, f                                                )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g                                             ] (nested: Molecule_07[a, b, c, d, e, f, g                                             ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g                                             )] = _nestedOpt[(a, b, c, d, e, f, g                                             )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h                                          ] (nested: Molecule_08[a, b, c, d, e, f, g, h                                          ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h                                          )] = _nestedOpt[(a, b, c, d, e, f, g, h                                          )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i                                       ] (nested: Molecule_09[a, b, c, d, e, f, g, h, i                                       ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i                                       )] = _nestedOpt[(a, b, c, d, e, f, g, h, i                                       )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j                                    ] (nested: Molecule_10[a, b, c, d, e, f, g, h, i, j                                    ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j                                    )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j                                    )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k                                 ] (nested: Molecule_11[a, b, c, d, e, f, g, h, i, j, k                                 ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k                                 )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k                                 )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l                              ] (nested: Molecule_12[a, b, c, d, e, f, g, h, i, j, k, l                              ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l                              )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l                              )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m                           ] (nested: Molecule_13[a, b, c, d, e, f, g, h, i, j, k, l, m                           ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m                           )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m                           )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ] (nested: Molecule_14[a, b, c, d, e, f, g, h, i, j, k, l, m, n                        ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n                        )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ] (nested: Molecule_15[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o                     )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ] (nested: Molecule_16[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p                  )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ] (nested: Molecule_17[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q               )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ] (nested: Molecule_18[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r            )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ] (nested: Molecule_19[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s         )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ] (nested: Molecule_20[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t      )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ] (nested: Molecule_21[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   ]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u   )](nested.dataModel)
  final def *?[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] (nested: Molecule_22[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v]): NestedInit_21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)] = _nestedOpt[(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)](nested.dataModel)
}

